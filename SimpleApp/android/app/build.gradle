apply plugin: "com.android.application"

import com.android.build.OutputFile
import com.alibaba.fastjson.JSONObject
import com.alibaba.fastjson.JSON

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * react.gradle文件为每个构建变体注册了一个任务（例如 bundleDebugJsAndAssets 和 bundleReleaseJsAndAssets）
 *
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 * 这些基本上是在Android构建周期中调用react-native打包，并带上正确的参数。默认情况下，bundleDebugJsAndAssets任务
 * 会被跳过，因为在调试/开发模式中我们更愿意直接从开发服务器加载这些bundle后的文件。从下面的设置中你可以看到所有
 * 可能的配置项及它们的默认值。如果你想添加一个配置块，请确保它添加在'apply from: ……'这一行前面。
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle（生成的含有js bundle的asset文件名称）
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation（入口bundle文件）
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode（是否在调试模式下打包JS和资产文件）
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode（是否在发布模式下打包js和资产文件）
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).  是否在其他构建变体打包js和资产文件
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats  按以下的格式配置属性
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   是否在自定义的构建变体中禁用开发模式（默认只在发布模式下禁用），比如，在staging阶段禁用开发模式
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives  项目的根目录，即package.json所在处
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode  调试模式下，js打包资产放哪
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode  发布模式下，js打包资产放哪
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via require('./image.png')), in debug mode
 *   debug模式下，drawable资源/React Native资产 放哪？例如，你使用require('./image.png')定义的图片
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via require('./image.png')), in release mode
 *   release模式下，drawable资源/React Native资产 放哪？例如，你使用require('./image.png')定义的图片
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   默认情况下，如果没有js文件或者资产变更，gradle任务会跳过。这意味着我们不能在android/或者ios/下检查这些文件，以确定任务是否是最新的。
 *   出于性能考虑，你想忽略任何其他文件的话，将它们添加到此。反之，如果android/下有js文件(需要被侦听到变更)，你可能要从此处移除。
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments  覆盖被调用的结点并使用其他参数
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager  为packager添加其他的参数
 *   extraPackagerArgs: []
 * ]
 */
project.ext.react = [
        bundleAssetName: "simple.android.bundle",
        entryFile: "js/index.android.js",
        bundleInDebug: false,
        bundleInRelease: true,
		inputExcludes: ["android/**", "ios/**", ".idea/**", ".vscode/**"]
]

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 * 设置此选项为true以创建两个单独的APK文件而非一个，分别运行在ARM和x86设备。这样做的好处是apk文件体积能减少
 * 4MB。将两个apk都上传到谷歌Play Store，人们根据设备的CPU架构来选择下载正确的文件。
 */
def enableSeparateBuildPerCPUArchitecture = true

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 * 在发布版本中运行混淆来收缩Java字节码
 */
def enableProguardInReleaseBuilds = false

android {
    compileSdkVersion 25
    buildToolsVersion "26.0.3"

    defaultConfig {
        applicationId "com.simpleapp"
        minSdkVersion 16
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        // 需要在x86模拟器上运行时加上"x86"
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
    }
    signingConfigs {
        release {
            storeFile file(MYAPP_RELEASE_STORE_FILE)
            storePassword MYAPP_RELEASE_STORE_PASSWORD
            keyAlias MYAPP_RELEASE_KEY_ALIAS
            keyPassword MYAPP_RELEASE_KEY_PASSWORD
        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK（如果为true会创建通用的apk）
            include "armeabi-v7a", "x86"
        }
    }
    // 构建的类型
    buildTypes {
        // 对 debug 类型进行配置，applicationId后加“.debug”
        debug {
            //applicationIdSuffix ".debug"
            signingConfig signingConfigs.release
        }
        // 创建jnidebug 类型，它复制于buildTypes.debug
//        jnidebug.initWith(buildTypes.debug)
//        jnidebug {
//            applicationIdSuffix ".jnidebug"
//        }
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
        }
    }
    // 产品的风格定制
    productFlavors {
        lj {
            applicationId "com.dscf.a"
            versionCode 20
        }
    }



//	productFlavors.all { flavor ->
//		println name
//		println JSON.toJSONString(flavor)+'\n'
//	}

//	productFlavors.each { flavor ->
//		println flavor.name
//	}

    // Build Type + Product Flavor = Build Variant（构建类型 + 产品风格 = 构建变种版本）

    // 应用变体，如：debug/release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // 在这里，为每一种架构(armeabi-v7a或者x86)的apk文件单独设置一个唯一的版本号，如链接所述
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a": 1, "x86": 2]
            def abi = output.getFilter(OutputFile.ABI)
			println abi
			/**
			* 若是通用的 debug 或 release 变种版本，则abi为null，否则为armeabi-v7a或者x86，
			* 此时将重写versionCode，使用1048576*1或*2+原有versionCode来表示新的versionCode，
			* 而versionCode决定着新旧版本能否互相叠加安装，所以需要特别谨慎处理。
			*/
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

dependencies {
    compile fileTree(dir: "libs", include: ["*.jar"])
    compile "com.android.support:appcompat-v7:25.3.1"
    compile "com.android.support:support-v4:25.3.1"
    compile 'com.airbnb.android:lottie:2.2.0'
    compile "com.facebook.react:react-native:+"  // 从 node_modules 目录下读取
}

// Run this once to be able to run the application with BUCK（一旦启用了开启BUCK就运行此任务）
// puts all compile dependencies into folder libs for BUCK to use（将所有的编译形态的依赖放入到libs目录下以便BUCK插件使用）
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
